from typing import List, Dict, Tuple, Optional
import random

class MemoryGameLogic:
    def __init__(self):
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏: —Ä—ñ–≤–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Å—ñ—Ç–∫–∏ (—Ä—è–¥–∫–∏, —Å—Ç–æ–≤–ø—Ü—ñ)
        self.difficulty_levels: Dict[str, Tuple[int, int]] = {
            "Easy": (3, 4),  # –õ–µ–≥–∫–∏–π: 3 —Ä—è–¥–∫–∏, 4 —Å—Ç–æ–≤–ø—Ü—ñ (12 –∫–∞—Ä—Ç–æ–∫)
            "Medium": (4, 5),  # –°–µ—Ä–µ–¥–Ω—ñ–π: 4 —Ä—è–¥–∫–∏, 5 —Å—Ç–æ–≤–ø—Ü—ñ–≤ (20 –∫–∞—Ä—Ç–æ–∫)
            "Hard": (5, 6)  # –í–∞–∂–∫–∏–π: 5 —Ä—è–¥–∫—ñ–≤, 6 —Å—Ç–æ–≤–ø—Ü—ñ–≤ (30 –∫–∞—Ä—Ç–æ–∫)
        }

        # –°—Ç–∞–Ω –≥—Ä–∏
        self.rows: int = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É –≥—Ä—ñ
        self.cols: int = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É –≥—Ä—ñ
        self.pairs_needed: int = 0  # –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä–∏
        self.symbols: List[str] = []  # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç–∫–∞—Ö
        self.moves: int = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Ö–æ–¥—ñ–≤
        self.first_symbol: Optional[str] = None  # –ü–µ—Ä—à–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Å–∏–º–≤–æ–ª
        self.first_index: Optional[int] = None  # –Ü–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ—ó –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –∫–∞—Ä—Ç–∫–∏
        self.can_click: bool = True  # –ß–∏ –º–æ–∂–Ω–∞ –∫–ª—ñ–∫–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫–∏ –∑–∞—Ä–∞–∑

    def setup_game(self, rows: int, cols: int) -> None:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥—Ä—É –∑ –æ–±—Ä–∞–Ω–∏–º —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.

        Args:
            rows (int): –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —Å—ñ—Ç–∫–∏
            cols (int): –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Å—ñ—Ç–∫–∏

        –î—ñ—ó:
            1. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ä–∏ —Å—ñ—Ç–∫–∏
            2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä —Å–∏–º–≤–æ–ª—ñ–≤
            3. –ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤ –∑ emoji
            4. –ü–æ–¥–≤–æ—é—î —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä —Ç–∞ –ø–µ—Ä–µ–º—ñ—à—É—î —ó—Ö
        """
        self.rows = rows
        self.cols = cols
        self.pairs_needed = (rows * cols) // 2

        emoji_symbols = ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº",
                         "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "üêî",
                         "üêß", "üê¶", "üê§", "ü¶Ñ", "üêù", "üêõ", "ü¶ã", "üêå"]

        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å = pairs_needed)
        selected_symbols = random.sample(emoji_symbols, self.pairs_needed)
        # –ü–æ–¥–≤–æ—é—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–∞—Ä —Ç–∞ –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ
        self.symbols = selected_symbols * 2
        random.shuffle(self.symbols)

    def handle_click(self, idx: int, button_text: str) -> Tuple[bool, Optional[int], str]:
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        Args:
            idx (int): –Ü–Ω–¥–µ–∫—Å –∫–ª—ñ–∫–Ω—É—Ç–æ—ó –∫–∞—Ä—Ç–∫–∏
            button_text (str): –ü–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø—Ü—ñ

        Returns:
            Tuple[bool, Optional[int], str]:
                - bool: –ß–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É
                - Optional[int]: –Ü–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ—ó –∫–∞—Ä—Ç–∫–∏ (—è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É)
                - str: –°–∏–º–≤–æ–ª –Ω–∞ –∫–ª—ñ–∫–Ω—É—Ç—ñ–π –∫–∞—Ä—Ç—Ü—ñ

        –õ–æ–≥—ñ–∫–∞:
            1. –Ø–∫—â–æ –∫–ª—ñ–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∞–±–æ –∫–∞—Ä—Ç–∫–∞ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ - —ñ–≥–Ω–æ—Ä—É—î–º–æ
            2. –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∫–ª—ñ–∫ - –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ —Å–∏–º–≤–æ–ª
            3. –Ø–∫—â–æ —Ü–µ –¥—Ä—É–≥–∏–π –∫–ª—ñ–∫:
               - –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ö–æ–¥—ñ–≤
               - –ë–ª–æ–∫—É—î–º–æ –ø–æ–¥–∞–ª—å—à—ñ –∫–ª—ñ–∫–∏
               - –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É
        """
        if not self.can_click or button_text != "?":
            return (False, None, "")

        current_symbol = self.symbols[idx]

        if self.first_symbol is None:  # –ü–µ—Ä—à–∏–π –∫–ª—ñ–∫
            self.first_symbol = current_symbol
            self.first_index = idx
            return (False, None, current_symbol)
        else:  # –î—Ä—É–≥–∏–π –∫–ª—ñ–∫
            self.moves += 1
            self.can_click = False

            if self.first_symbol == current_symbol:  # –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É
                return (True, None, current_symbol)
            else:  # –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É
                first_index = self.first_index
                self.first_symbol = None
                self.first_index = None
                return (False, first_index, current_symbol)

    def reset_turn(self) -> None:
        """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω —Ö–æ–¥—É –ø—ñ—Å–ª—è –Ω–µ–≤–¥–∞–ª–æ—ó —Å–ø—Ä–æ–±–∏ –∑–Ω–∞–π—Ç–∏ –ø–∞—Ä—É.
        –î–æ–∑–≤–æ–ª—è—î –∑–Ω–æ–≤—É –∫–ª—ñ–∫–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫–∏.
        """
        self.can_click = True

    def check_win(self, buttons_state: List[str]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –ø–∞—Ä–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ (—É–º–æ–≤–∞ –ø–µ—Ä–µ–º–æ–≥–∏).

        Args:
            buttons_state (List[str]): –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—ñ–≤ –∫–Ω–æ–ø–æ–∫
        Returns:
            bool: True —è–∫—â–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ (—Å—Ç–∞–Ω–∏ = "disabled")
        """
        return all(state == "disabled" for state in buttons_state)