import tkinter as tk
from tkinter import font, messagebox
from typing import List, Optional, Dict, Tuple, Callable

class MemoryGameGUI:
    def __init__(self, root: tk.Tk, difficulty_levels: Dict[str, Tuple[int, int]]):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≥—Ä–∏.
        Args:
            root: –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ (Tkinter root)
            difficulty_levels: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä—ñ–≤–Ω—è–º–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (–Ω–∞–∑–≤–∞: (—Ä—è–¥–∫–∏, —Å—Ç–æ–≤–ø—Ü—ñ))
        """
        self.root = root
        self.root.title("Memory Game")
        self.difficulty_levels = difficulty_levels

        # –°—É—á–∞—Å–Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞:
        self.bg_color = "#f5f5f5"  # –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É
        self.card_bg = "#3a7ca5"  # –∫–æ–ª—ñ—Ä –∫–∞—Ä—Ç–æ–∫
        self.card_fg = "white"  # –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É –Ω–∞ –∫–∞—Ä—Ç–∫–∞—Ö
        self.card_font = ("Arial", 14, "bold")  # —à—Ä–∏—Ñ—Ç –∫–∞—Ä—Ç–æ–∫
        self.disabled_color = "#2fbf71"  # –∫–æ–ª—ñ—Ä –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–∞—Ä
        self.highlight_color = "#ffd166"  # –∫–æ–ª—ñ—Ä –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        self.text_color = "#2b2d42"  # –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
        self.button_hover = "#2a628f"  # –∫–æ–ª—ñ—Ä –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ

        self.buttons: List[tk.Button] = []  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫-–∫–∞—Ä—Ç–æ–∫
        self.moves_label: Optional[tk.Label] = None  # –º—ñ—Ç–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ö–æ–¥—ñ–≤
        self.difficulty_command: Optional[Callable] = None  # —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ

    def setup_menu(self, difficulty_command: Callable) -> None:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –≤–∏–±–æ—Ä–æ–º —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.
        Args:
            difficulty_command: –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä—ñ–≤–Ω—è
        """
        self.clear_window()
        self.difficulty_command = difficulty_command

        # –§—Ä–µ–π–º –¥–ª—è –º–µ–Ω—é
        menu_frame = tk.Frame(self.root, bg=self.bg_color)
        menu_frame.pack(expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∏
        title = tk.Label(
            menu_frame,
            text="Memory Game",
            font=("Arial", 28, "bold"),
            bg=self.bg_color,
            fg=self.text_color
        )
        title.pack(pady=(0, 30))

        # –ö–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        for level, (rows, cols) in self.difficulty_levels.items():
            btn = tk.Button(
                menu_frame,
                text=f"{level} ({rows}√ó{cols})",  # –ù–∞–∑–≤–∞ —Ä—ñ–≤–Ω—è —Ç–∞ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å
                font=self.card_font,
                command=lambda r=rows, c=cols: self.difficulty_command(r, c),
                width=18,
                pady=8,
                bg=self.card_bg,
                fg="white",
                activebackground=self.button_hover,
                relief="flat",
                bd=0
            )
            btn.pack(pady=6)
            # –ï—Ñ–µ–∫—Ç–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –∫—É—Ä—Å–æ—Ä–∞
            btn.bind("<Enter>", lambda e, b=btn: b.config(bg=self.button_hover))
            btn.bind("<Leave>", lambda e, b=btn: b.config(bg=self.card_bg))

        # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        exit_btn = tk.Button(
            menu_frame,
            text="Exit",
            font=self.card_font,
            command=self.root.quit,
            width=18,
            pady=8,
            bg="#d64045",  # —á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏—Ö–æ–¥—É
            fg="white",
            activebackground="#c73232",
            relief="flat"
        )
        exit_btn.pack(pady=(20, 0))
        exit_btn.bind("<Enter>", lambda e: exit_btn.config(bg="#c73232"))
        exit_btn.bind("<Leave>", lambda e: exit_btn.config(bg="#d64045"))

    def setup_board(self, rows: int, cols: int, button_command: Callable) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∑ –∫–∞—Ä—Ç–∫–∞–º–∏.
        Args:
            rows: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
            cols: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤
            button_command: –§—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç–∫—É
        """
        self.clear_window()

        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º —Ö–æ–¥—ñ–≤ —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –º–µ–Ω—é
        header_frame = tk.Frame(self.root, bg=self.bg_color)
        header_frame.pack(fill="x", pady=(10, 20), padx=20)
        self.moves_label = tk.Label(
            header_frame,
            text="Moves: 0",
            font=("Arial", 16, "bold"),
            bg=self.bg_color,
            fg=self.text_color
        )
        self.moves_label.pack(side="left")
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        menu_btn = tk.Button(
            header_frame,
            text="Menu",
            font=("Arial", 12),
            command=lambda: self.setup_menu(self.difficulty_command),
            padx=15,
            pady=3,
            bg="#8d99ae",
            fg="white",
            activebackground="#6c757d",
            relief="flat"
        )
        menu_btn.pack(side="right")
        menu_btn.bind("<Enter>", lambda e: menu_btn.config(bg="#6c757d"))
        menu_btn.bind("<Leave>", lambda e: menu_btn.config(bg="#8d99ae"))

        # –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
        board_frame = tk.Frame(self.root, bg=self.bg_color)
        board_frame.pack(expand=True, padx=20, pady=(0, 20))

        self.buttons = []  # –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫
        for i in range(rows):
            for j in range(cols):
                idx = i * cols + j  # –õ—ñ–Ω—ñ–π–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
                btn = tk.Button(
                    board_frame,
                    text="?",  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω - –∑–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è
                    font=self.card_font,
                    width=4,
                    height=2,
                    bg=self.card_bg,
                    fg=self.card_fg,
                    activebackground=self.button_hover,
                    command=lambda x=idx: button_command(x),
                    relief="raised",
                    borderwidth=3
                )
                btn.grid(row=i, column=j, padx=5, pady=5, ipadx=5, ipady=5)
                self.buttons.append(btn)

    def update_button(self, idx: int, symbol: str, disabled: bool = False) -> None:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –∫–∞—Ä—Ç–∫–∏.
        Args:
            idx: –Ü–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
            symbol: –°–∏–º–≤–æ–ª, —è–∫–∏–π –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è
            disabled: –ß–∏ –∫–∞—Ä—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
        """
        btn = self.buttons[idx]
        if disabled:
            # –°—Ç–∞–Ω –∑–Ω–∞–π–¥–µ–Ω–æ—ó –ø–∞—Ä–∏
            btn.config(
                text=symbol,
                state="disabled",
                disabledforeground="white",
                bg=self.disabled_color,
                relief="sunken"
            )
        else:
            # –°—Ç–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –∫–∞—Ä—Ç–∫–∏
            btn.config(
                text=symbol,
                bg=self.highlight_color,
                fg="black",
                relief="sunken"
            )

    def reset_button(self, idx: int) -> None:
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —É –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω.
        Args:
            idx: –Ü–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
        """
        btn = self.buttons[idx]
        btn.config(
            text="?",
            bg=self.card_bg,
            fg=self.card_fg,
            state="normal",
            relief="raised"
        )

    def update_moves(self, moves: int) -> None:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ö–æ–¥—ñ–≤.
        Args:
            moves: –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤
        """
        self.moves_label.config(text=f"Moves: {moves}")

    def clear_window(self) -> None:
        """–û—á–∏—â–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –≤—ñ–¥ –≤—ñ–¥–∂–µ—Ç—ñ–≤."""
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_win_message(self, moves: int) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É.
        Args:
            moves: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤, –∑–∞ —è–∫—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≥—Ä—É
        """
        win_window = tk.Toplevel(self.root)
        win_window.title("Congratulations!")
        win_window.geometry("400x250")
        win_window.resizable(False, False)
        win_window.configure(bg=self.bg_color)
        win_window.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ

        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        win_window.update_idletasks()
        width = win_window.winfo_width()
        height = win_window.winfo_height()
        x = (win_window.winfo_screenwidth() // 2) - (width // 2)
        y = (win_window.winfo_screenheight() // 2) - (height // 2)
        win_window.geometry(f'+{x}+{y}')
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É
        tk.Label(
            win_window,
            text="You Won! üéâ",
            font=("Arial", 22, "bold"),
            bg=self.bg_color,
            fg=self.disabled_color
        ).pack(pady=(20, 10))

        tk.Label(
            win_window,
            text=f"Completed in {moves} moves!",
            font=("Arial", 14),
            bg=self.bg_color,
            fg=self.text_color
        ).pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(win_window, bg=self.bg_color)
        button_frame.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∞ "–ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É"
        replay_btn = tk.Button(
            button_frame,
            text="Play Again",
            font=("Arial", 12, "bold"),
            command=lambda: [win_window.destroy(), self.setup_menu(self.difficulty_command)],
            bg=self.card_bg,
            fg="white",
            padx=20,
            pady=5,
            relief="flat"
        )
        replay_btn.pack(side="left", padx=10, ipadx=5, ipady=3)
        replay_btn.bind("<Enter>", lambda e: replay_btn.config(bg=self.button_hover))
        replay_btn.bind("<Leave>", lambda e: replay_btn.config(bg=self.card_bg))

        # –ö–Ω–æ–ø–∫–∞ "–í–∏–π—Ç–∏"
        exit_btn = tk.Button(
            button_frame,
            text="Exit",
            font=("Arial", 12, "bold"),
            command=self.root.quit,
            bg="#d64045",
            fg="white",
            padx=20,
            pady=5,
            relief="flat"
        )
        exit_btn.pack(side="right", padx=10, ipadx=5, ipady=3)
        exit_btn.bind("<Enter>", lambda e: exit_btn.config(bg="#c73232"))
        exit_btn.bind("<Leave>", lambda e: exit_btn.config(bg="#d64045"))